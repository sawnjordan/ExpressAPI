CURD (Create, Read, Update, Delete)

Create => POST
Read => GET
Update => PUT/PATCH
Delete => DELETE

Rule set 
camelCase, PascalCase/StudlyCaps, snake_case, CAPS, skewer-case/kebab-case

Naming Convention 
    Folder Name         ---> skewer-case
    File Name           ---> skewer-case 
    class Name          ---> PascalCase 
    function Naming     ---> camelCase 
    variable Naming     ---> camelCase/snake_case
    Constant Naming     ---> CAPSCASE

    Folder Organization 
    src 
        config/
            app.js => express config 
            route.config.js => 
        modules/
            auth/
                file.controller.js
                file.model.js 
                file.services.js 
                file.routes.js 
                index.js 
            features/
                feature.controller.js
                feature.model.js 
                feature.services.js 
                feature.routes.js 
                index.js 
        common/
            common.controller.js 
            common.model.js
        utilites 
            helpers.js
        server.js



    src/
        controller/
            ...
        model/
            ...
        services/
            ...
        config/
            ....
        routes/
            ...
        helpers/
            ...
        server.js
        app.js 
        


Web Application/Web 
    - News portal 
    - Ecommerce 
    - MIS 

Ecommerce Type 
    - B2C
        - daraz 
    - C2C 
        - hamrobazar 
    - G2B
    - C2B

B2C 
    -> Ecommerce 
        
        - Add to Cart 
        - Order Management
        - Payment System 
        - Review and Rating 
        - Categorised Data 
        - Offers 
        - Product Search System 
        - Order Tracking 
        - Logistic 
        - Analytics 
        
        - Social Media Integrations 



- Authorization and Authentication 
- Product CRUD Operation 
- Category CRUD Operation 
- Brand CRUD Operation 
- Order Management 

- Payment Management(Integration)
- Review And Rating 
- Offer Modules 
- Blog 
- Inventory 
- Social Media Integration 


Role based Actions 
- 3 roles 
    admin -> All Permission 
    seller  -> Can perform CRUD with the self products 
            -> Can view the order placed for their products
    customer -> Can place order in the system 
            -> Can view his/her History of the order


FrontView ======> View 
CMS => Content Management System ===> 

// Make the project Directory
// get inside the project directory
    // npm init
    // Answer all the questions with your answers
    // npm init -y 
// install expres in your project 
    // npm i express 
// Express application develop

// Routing => API 
=> Api is an endpoint or url configured for the request handling 

Auth 
    -> Register System 
        => Get data 
        -> Creation of user 

CRUD 
Create  => post 
Read => Get 
update => put/patch 
Delete => delete


- Software 
    - Postman 
    - Insomnia 
    - thunder client (extension VSCODE )

===== Plugis/packages ======
-> csv-parser
-> cookies-parser
-> form data line paryo vani multer vanni middleware

-- Validation packages
    = Zod validation packages mostly used.
    = joi

Sharp NPM package

MongoDB Commands
 == use db_name // this will use/create the db_name
 == show dbs  //list all the available non-empty db list
 == db  //show the current db


 JSON   
 => Collection ===> Tables
 => Documents  ===> Rows


 CRUD 
    -> Create
        -> To insert the data in the database
        -> _id field will be auto added
        -> this keyu performs as a primary key
        -> it is unique
        commands:
            single Row => db.collectionName.inserOne(objectData)
            multiple Row => db.collectionName.inserMany(objectData)

    ->Read
        commands:
            db.collectionName.find()
            db.collectionName.findOne()
    ->Update
        commands:
            -> db.collectionName.updateOne(filter,{$set: dataUpdate})
    ->Delete

{"name": "Ramesh Singh","email": "ramesh@gmail.com","address": "India","phone": "98434344456","image":"1688348548257-IMG_20230518_095645.jpg"}

    ecommerce   
        command: 
        - use ecommerce
        try to insert product information with
            - name,
            - price,
            - discount,
            - afterDiscount,
            - brand,
            - category
            ***keys in the product Tables


            a. Insert atleast 10 different products with the above data
            b. Using InserMany also try ot insert data.
            command: 
            - db.products.insertMany([{ "name": "Samsung A04", "price": "20000", "discount": '2000',"afterDiscout":"18000", "brand": "Samsung", "category": "mobile"},{ "name": "Samsung A23", "price": "30000", "discount": '5000',"afterDiscout":"15000", "brand": "Samsung", "category": "mobile"},{ "name": "iPhone13", "price": "150000", "discount": '10000',"afterDiscout":"140000", "brand": "Apple", "category": "mobile"},{ "name": "iPhone13 Pro", "price": "200000", "discount": '30000',"afterDiscout":"170000", "brand": "Apple", "category": "mobile"},{ "name": "Redmi Note 12", "price": "40000", "discount": '5000',"afterDiscout":"35000", "brand": "Redmi", "category": "mobile"},{ "name": "Readme GT NEO3", "price": "50000", "discount": '5000',"afterDiscout":"45000", "brand": "RealMe", "category": "mobile"},{ "name": "One Plus 9 Pro", "price": "120000", "discount": '25000',"afterDiscout":"95000", "brand": "OnePlus", "category": "mobile"},{ "name": "One Plus NORD", "price": "60000", "discount": '10000',"afterDiscout":"50000", "brand": "OnePlus", "category": "mobile"},{ "name": "Xiaomi 13", "price": "50000", "discount": '7000',"afterDiscout":"43000", "brand": "Xiomi", "category": "mobile"},{ "name": "Xiaomi 14", "price": "35000", "discount": '5000',"afterDiscout":"30000", "brand": "Xiomi", "category": "mobile"}])


            c. Read all the data from the product  Tables

            command:
            - db.products.find()

            d. Find only name, price and brand data from the products 
            
            command:
            - db.products.find({}, {name: 1, price: 1, _id: 0})

            e. Find all the products belonging to "apple" brand

            command:
            - db.products.find({brand: "Apple"})

            f. Find all the products having price greater than 10% and from apple brand 
            command:
             - db.products.find({discount: {$gt: '1000'}, brand:{$eq: "Apple"}})

























